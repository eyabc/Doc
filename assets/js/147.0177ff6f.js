(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{556:function(s,a,t){"use strict";t.r(a);var n=t(44),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"item3-private-생성자나-열거-타입으로-싱글턴임을-보증하라"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#item3-private-생성자나-열거-타입으로-싱글턴임을-보증하라"}},[s._v("#")]),s._v(" ITEM3 private 생성자나 열거 타입으로 싱글턴임을 보증하라")]),s._v(" "),t("h2",{attrs:{id:"singleton"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#singleton"}},[s._v("#")]),s._v(" Singleton")]),s._v(" "),t("p",[s._v("인스턴스를 오직 하나만 생성할 수 있는 클래스")]),s._v(" "),t("h3",{attrs:{id:"대상"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#대상"}},[s._v("#")]),s._v(" 대상")]),s._v(" "),t("ul",[t("li",[s._v("함수와 같은 무상태 객체 ??")]),s._v(" "),t("li",[s._v("설계상 유일해야 하는 시스템 컴포넌트")])]),s._v(" "),t("h3",{attrs:{id:"한계"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#한계"}},[s._v("#")]),s._v(" 한계")]),s._v(" "),t("p",[s._v("싱글턴 클래스를 사용하는 클라이언트를 테스트하기 어렵다.")]),s._v(" "),t("ul",[t("li",[s._v("싱글턴 인스턴스를 mock 구현으로 대체할 수 없다.")]),s._v(" "),t("li",[s._v("방법은 있다. 타입을 인터페이스로 정의한 다음, 그 인터페이스를 구현해 싱글턴으로 만든다.")])]),s._v(" "),t("h2",{attrs:{id:"singleton-생성-방식"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#singleton-생성-방식"}},[s._v("#")]),s._v(" Singleton 생성 방식")]),s._v(" "),t("ul",[t("li",[s._v("생성자는 private 으로 감춘다.")]),s._v(" "),t("li",[s._v("유일한 인스턴스에 접근할 수 있는 수단으로 "),t("code",[s._v("public static")]),s._v(" 멤버를 하나 만든다.")]),s._v(" "),t("li",[s._v("리플렉션 공격 : 클라이언트에서 [65]AccessibleObject.setAccessible 을 사용해 private 을 호출할 수 있는 취약점\n"),t("ul",[t("li",[s._v("생성자에서 두 번째가 객체생성되려 할 때 예외를 던지는 코드를 추가해 준다.")])])])]),s._v(" "),t("h3",{attrs:{id:"_1-public-static-final-필드-방식의-싱글턴"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-public-static-final-필드-방식의-싱글턴"}},[s._v("#")]),s._v(" 1. public static final 필드 방식의 싱글턴")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Elvis")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Elvis")]),s._v(" INSTANCE "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Elvis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Elvis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* ...*/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("leaveTheBuilding")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* ... */")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("ul",[t("li",[s._v("해당 클래스가 싱글턴임이 API 에 명백히 드러난다.")]),s._v(" "),t("li",[s._v("간결하다")])]),s._v(" "),t("h3",{attrs:{id:"_2-정적-팩터리-방식의-싱글턴"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-정적-팩터리-방식의-싱글턴"}},[s._v("#")]),s._v(" 2. 정적 팩터리 방식의 싱글턴")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Elvis")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Elvis")]),s._v(" INSTANCE "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Elvis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Elvis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*... */")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Elvis")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" INSTANCE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ol",[t("li",[t("p",[s._v("API 를 바꾸지 않고도 싱글턴이 아니게 변경할 수 있다.")]),s._v(" "),t("ul",[t("li",[s._v("스레드 별로 다른 인스턴스를 넘겨주게 할 수 있다.\n"),t("ul",[t("li",[s._v("DataSourceLookupKeyContextHolder 구현..")])])])])]),s._v(" "),t("li",[t("p",[s._v("정적 팩터리를 제네링 싱글턴 팩터리로 만들 수 있다[30] ??")])]),s._v(" "),t("li",[t("p",[s._v("정적 팩터리의 메서드 참조를 공급자(supplier) 로 사용할 수 있다 ??")])])]),s._v(" "),t("blockquote",[t("p",[s._v("java 를 잘 몰라서...")])]),s._v(" "),t("p",[s._v("이러한 장점들이 굳이 필요하지 않으면 public 필드 방식이 좋다.")]),s._v(" "),t("h4",{attrs:{id:"싱글턴-클래스의-직렬화-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#싱글턴-클래스의-직렬화-12"}},[s._v("#")]),s._v(" 싱글턴 클래스의 직렬화[12]")]),s._v(" "),t("p",[s._v("Serializable 의 구현/선언 의 한계"),t("br"),s._v("\n→ 직렬화된 인스턴스를 역직렬화 할 때마다 새로운 인스턴스가 만들어짐")]),s._v(" "),t("ol",[t("li",[s._v("모든 인스턴스 필드를 일시적(transient) 로 선언")]),s._v(" "),t("li",[s._v("Elvis 클래스에 다음의 readResolve 메서드 제공 [89]")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("readResolve")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 진짜 'Elvis' 를 반환하고, 가짜 Elvis 는 가비지 컬렉터에 맡긴다.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" INSTANCE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"_3-원소가-하나인-열거-타입-선언"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-원소가-하나인-열거-타입-선언"}},[s._v("#")]),s._v(" 3. 원소가 하나인 열거 타입 선언")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Elvis")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    INSTANCE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("leaveTheBuilding")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* ...*/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ol",[t("li",[s._v("public 필드 방식보다 더 간결하다")]),s._v(" "),t("li",[s._v("추가 노력없이 직렬화 가능")]),s._v(" "),t("li",[s._v("복잡한 직렬화 상황이나 리플렉션 공격을 완벽히 막아준다.")])]),s._v(" "),t("p",[s._v("대부분의 상황, 싱글턴을 만드는 가장 좋은 방법")]),s._v(" "),t("p",[s._v("한계")]),s._v(" "),t("ul",[t("li",[s._v("만드려는 싱글턴이 Enum 외의 클래스를 상속해야 한다면 사용할 수 없다.")])]),s._v(" "),t("blockquote",[t("p",[s._v("어떤 상황이 있을까, Spring 을 쓰는 상황에서도 싱글턴 패턴을 직접 만드는 일이 있을까?")])]),s._v(" "),t("ul",[t("li",[s._v("열거 타입이 다른 인터페이스를 구현하도록 선언할 수는 있다.")])])])}),[],!1,null,null,null);a.default=e.exports}}]);