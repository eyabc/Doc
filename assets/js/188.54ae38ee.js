(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{596:function(_,v,t){"use strict";t.r(v);var a=t(44),e=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"운영체제"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#운영체제"}},[_._v("#")]),_._v(" 운영체제")]),_._v(" "),t("p",[_._v("면접 스터디에 가입을 했지만")]),_._v(" "),t("ol",[t("li",[_._v("실제로 프로그래밍에서 어떻게 접목이 되는가?")]),_._v(" "),t("li",[_._v("공부하면 재미있는 부분인가?")]),_._v(" "),t("li",[_._v("실제로 공부하는 이론을 직접 볼수 있는가?")]),_._v(" "),t("li",[_._v("다른 프로그래머와 원활한 소통을 위한 공부")]),_._v(" "),t("li",[_._v("다시 보았을 때 이해가 되는 dictionary 같은 존재")])]),_._v(" "),t("p",[_._v("에 맞추어 공부를 했으면 좋겠다.")]),_._v(" "),t("p",[_._v("그리고 여러가지 자료를 보면서 어디서 공부를 하고 어느정도까지 공부를 하면 좋을까 많은 고민을 하였다.\n그 중 학부 시절 때 최종무 교수님이 수업강의가 너무 재미있었기 때문에 다시 학과 자료를 펴서 공부를 해보기로 하였다.")]),_._v(" "),t("h2",{attrs:{id:"_1-프로세스와-스레드의-차이"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-프로세스와-스레드의-차이"}},[_._v("#")]),_._v(" 1. 프로세스와 스레드의 차이")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/31977543/96371404-8e020700-119c-11eb-9685-db2508c39631.png",alt:"image"}})]),_._v(" "),t("h2",{attrs:{id:"프로그램"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#프로그램"}},[_._v("#")]),_._v(" 프로그램")]),_._v(" "),t("ul",[t("li",[_._v("보조 기억장치(하드 디스크, SSD) 에 존재")]),_._v(" "),t("li",[_._v("실행되기를 기다리는 명령어(코드)와 정적인 데이터의 묶음.")]),_._v(" "),t("li",[_._v("프로그램이 디스크에서 메모리에 적재되면 프로세스가 된다.")])]),_._v(" "),t("h3",{attrs:{id:"프로세스-process"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#프로세스-process"}},[_._v("#")]),_._v(" 프로세스 (Process)")]),_._v(" "),t("ul",[t("li",[_._v("실행중인 프로그램")]),_._v(" "),t("li",[_._v("loaded : 디스크 -> 메모리\n"),t("ul",[t("li",[_._v("CPU 의 할당을 받을 수 있음")])])]),_._v(" "),t("li",[_._v("주소공간, 파일, 메모리 등을 할당 받음")]),_._v(" "),t("li",[_._v("공간\n"),t("ul",[t("li",[_._v("프로세스 스택 : 함수의 매개변수, 복귀주소, 로컬변수")]),_._v(" "),t("li",[_._v("데이터 섹션 : 전역변수")]),_._v(" "),t("li",[_._v("힙 : 프로세스 실행 중에 동적으로 할당되는 공간")])])])]),_._v(" "),t("h3",{attrs:{id:"pcb-프로세스-제어-블록-process-control-block"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pcb-프로세스-제어-블록-process-control-block"}},[_._v("#")]),_._v(" PCB 프로세스 제어 블록 Process Control Block")]),_._v(" "),t("p",[_._v("프로세스의 정보 저장소")]),_._v(" "),t("h4",{attrs:{id:"어떻게-만들어-지나"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#어떻게-만들어-지나"}},[_._v("#")]),_._v(" 어떻게 만들어 지나?")]),_._v(" "),t("ul",[t("li",[_._v("운영체제가 프로세스 생성과 동시에 고유한 PCB 생성")])]),_._v(" "),t("h4",{attrs:{id:"pcb-에-저장되는-정보"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pcb-에-저장되는-정보"}},[_._v("#")]),_._v(" PCB 에 저장되는 정보")]),_._v(" "),t("ul",[t("li",[_._v("프로세스 식별자 (PID)")]),_._v(" "),t("li",[_._v("프로세스 상태\n"),t("ul",[t("li",[_._v("new, ready, running, waiting, terminated 등")])])]),_._v(" "),t("li",[_._v("프로그램 카운터 (PC)")]),_._v(" "),t("li",[_._v("CPU 레지스터")]),_._v(" "),t("li",[_._v("CPU 스케줄링 정보\n"),t("ul",[t("li",[_._v("프로세스 우선순위, 스케줄 큐에 대한 포인터")])])]),_._v(" "),t("li",[t("s",[_._v("메모리 관리 정보")]),_._v(" "),t("ul",[t("li",[t("s",[_._v("페이지 테이블, 세그먼트 테이블")])])])]),_._v(" "),t("li",[t("s",[_._v("입출력 상태 정보")]),_._v(" "),t("ul",[t("li",[t("s",[_._v("프로세스에 할당된 입출력 장치들, 열린 파일 목록 ...")])])])]),_._v(" "),t("li",[t("s",[_._v("Accounting 정보")]),_._v(" "),t("ul",[t("li",[t("s",[_._v("사용된 CPU 시간, 시간 제한, 계정번호")])])])])]),_._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("#### 프로세스 상태\n- 생성(new) : 프로세스가 생성되는 중이다.\n- 실행(running) : 프로세스가 CPU 를 차지하여 명령어들이 실행되고 있다.\n- 준비(ready) : 프로세스가 CPU를 사용하고 있지는 않지만 언제든지 사용할 수 있는 상태로, CPU가 할당되기를 기다리고 있다. 일반적으로 준비 상태의 프로세스 중 우선순위가 높은 프로세스가 CPU 를 할당받는다.\n- 대기(waiting) : 보류(block)라고 부르기도 한다. 프로세스가 입출력 완료, 시그널 수신 등 어떤 사건을 기다리고 있는 상태를 말한다.\n- 종료(terminated) : 프로세스의 실행이 종료되었다.\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br")])]),t("h3",{attrs:{id:"스레드-thread"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#스레드-thread"}},[_._v("#")]),_._v(" 스레드 Thread")]),_._v(" "),t("ul",[t("li",[_._v("한 프로세스 내에서 동작되는 여러 실행 흐름")]),_._v(" "),t("li",[_._v("프로세스 내의 주소 공간이나 자원 공유")])]),_._v(" "),t("h4",{attrs:{id:"스레드의-구성"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#스레드의-구성"}},[_._v("#")]),_._v(" 스레드의 구성")]),_._v(" "),t("ul",[t("li",[_._v("스레드 ID")]),_._v(" "),t("li",[_._v("PC")]),_._v(" "),t("li",[_._v("레지스터 집합")]),_._v(" "),t("li",[_._v("스택")])]),_._v(" "),t("h4",{attrs:{id:"공유하는-자원"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#공유하는-자원"}},[_._v("#")]),_._v(" 공유하는 자원")]),_._v(" "),t("ul",[t("li",[t("s",[_._v("다른 스레드와의 코드")])]),_._v(" "),t("li",[t("s",[_._v("데이터 섹션")])]),_._v(" "),t("li",[t("s",[_._v("열린 파일")])]),_._v(" "),t("li",[t("s",[_._v("운영체제 자원")])])]),_._v(" "),t("h4",{attrs:{id:"스택을-스레드-마다-독립적으로-할당하는-이유"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#스택을-스레드-마다-독립적으로-할당하는-이유"}},[_._v("#")]),_._v(" 스택을 스레드 마다 독립적으로 할당하는 이유")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("스택")]),_._v(" "),t("ul",[t("li",[_._v("함수 호출시 전달되는 인자")]),_._v(" "),t("li",[_._v("복귀 주소값")]),_._v(" "),t("li",[_._v("함수내 선언된 변수")])])]),_._v(" "),t("li",[t("p",[_._v("스택 메모리 공간이 독립적 -> 독립적인 함수 호출(독립적이 실행 흐름)")])])]),_._v(" "),t("h4",{attrs:{id:"pc-register-를-스레드마다-독립적으로-할당하는-이유"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pc-register-를-스레드마다-독립적으로-할당하는-이유"}},[_._v("#")]),_._v(" PC register 를 스레드마다 독립적으로 할당하는 이유")]),_._v(" "),t("p",[_._v("스레드는 CPU 를 할당받았다가 스케줄러에 의해 다시 선점당함\n명령어가 어느부분까지 수행했는지 기억할 필요가 있음.")]),_._v(" "),t("h2",{attrs:{id:"_2-멀티-스레드"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-멀티-스레드"}},[_._v("#")]),_._v(" 2. 멀티 스레드")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/31977543/96371416-9bb78c80-119c-11eb-9347-e41f6c257a56.png",alt:"image"}})]),_._v(" "),t("h3",{attrs:{id:"멀티-스레딩의-장점"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#멀티-스레딩의-장점"}},[_._v("#")]),_._v(" 멀티 스레딩의 장점")]),_._v(" "),t("p",[_._v("동시처리의 변경: 프로세스 -> 스레드")]),_._v(" "),t("ul",[t("li",[_._v("스레드간 통신 : 전역변수 공간 / Heap 을 이용\n"),t("ul",[t("li",[_._v("스레드가 더 메모리 공간 / 시스템 자원 소모 절약")])])]),_._v(" "),t("li",[_._v("Context switch\n"),t("ul",[t("li",[_._v("프로세스 : 캐시 메모리를 비움")]),_._v(" "),t("li",[_._v("스레드 : 캐시 메모리를 비우지 않음\n"),t("ul",[t("li",[_._v("문맥 전환이 빠르다")])])])])])]),_._v(" "),t("h3",{attrs:{id:"멀티-스레딩-문제점"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#멀티-스레딩-문제점"}},[_._v("#")]),_._v(" 멀티 스레딩 문제점")]),_._v(" "),t("ul",[t("li",[_._v("스레드간 데이터와 힙 영역 공유\n"),t("ul",[t("li",[_._v("다른 스레드에서 사용중인 변수나 자료구조에서 엉뚱한 값 READ/WRITE")])])]),_._v(" "),t("li",[_._v("동기화 작업 필요\n"),t("ul",[t("li",[_._v("작업 처리 순서 제어")]),_._v(" "),t("li",[_._v("공유자원 접근 제어")])])]),_._v(" "),t("li",[_._v("과도한 lock 으로 병목현상이 있을 수 있다.")])]),_._v(" "),t("h3",{attrs:{id:"멀티-스레드-vs-멀티-프로세스"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#멀티-스레드-vs-멀티-프로세스"}},[_._v("#")]),_._v(" 멀티 스레드 vs 멀티 프로세스")]),_._v(" "),t("p",[_._v("멀티스레드")]),_._v(" "),t("ol",[t("li",[_._v("적은 메모리 공간, 문맥전환이 빠름")]),_._v(" "),t("li",[_._v("하나의 스레드가 종료되면 전체 스레드가 종료될 수 있다.")]),_._v(" "),t("li",[_._v("동기화 문제")])]),_._v(" "),t("p",[_._v("멀티 프로세스")]),_._v(" "),t("ol",[t("li",[_._v("프로세스 하나가 죽더라도 다른 프로세스에 영향을 끼치지 않는다.")]),_._v(" "),t("li",[_._v("멀티 스레드보다 더 많은 메모리 공간과 CPU 시간을 차지한다.")])]),_._v(" "),t("p",[_._v("결론")]),_._v(" "),t("ul",[t("li",[_._v("시스템 특징에 따라 방법을 선택한다.")])]),_._v(" "),t("h2",{attrs:{id:"_3-스케줄러"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-스케줄러"}},[_._v("#")]),_._v(" 3. 스케줄러")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/31977543/96371437-a96d1200-119c-11eb-8189-29ff07a0330e.png",alt:"image"}})]),_._v(" "),t("h3",{attrs:{id:"프로세스-스케줄링을-위한-queue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#프로세스-스케줄링을-위한-queue"}},[_._v("#")]),_._v(" 프로세스 스케줄링을 위한 Queue")]),_._v(" "),t("ol",[t("li",[_._v("Job Queue\n"),t("ul",[t("li",[_._v("현재 시스템 내의, 모든 프로세스")])])]),_._v(" "),t("li",[_._v("Ready Queue\n"),t("ul",[t("li",[_._v("현재 메모리에 있음")]),_._v(" "),t("li",[_._v("CPU 를 잡아서 실행되기를 기다리는 프로세스")])])]),_._v(" "),t("li",[_._v("Device Queue\n"),t("ul",[t("li",[_._v("Device I/O 작업을 대기하고 있는 프로세스의 집합")])])])]),_._v(" "),t("h3",{attrs:{id:"스케줄러의-종류"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#스케줄러의-종류"}},[_._v("#")]),_._v(" 스케줄러의 종류")]),_._v(" "),t("h4",{attrs:{id:"_1-장기-스케줄러-long-term-scheduler-job-scheduler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-장기-스케줄러-long-term-scheduler-job-scheduler"}},[_._v("#")]),_._v(" 1. 장기 스케줄러 (Long-term scheduler / job scheduler)")]),_._v(" "),t("ul",[t("li",[_._v("한정된 메모리에서 많은 프로세스들이 한꺼번에 올라올 경우")]),_._v(" "),t("li",[_._v("프로세스들은 대용량 메모리(일반적으로 디스크)에 임시로 저장됨")]),_._v(" "),t("li",[_._v("pool 에 저장된 프로세스 중 ready queue 에 보낼 프로세스를 결정한다.")])]),_._v(" "),t("ol",[t("li",[_._v("메모리와 디스크 사이의 스케줄링")]),_._v(" "),t("li",[_._v("프로세스에 메모리를 할당.")]),_._v(" "),t("li",[_._v("실행중인 프로세스의 수 제어")])]),_._v(" "),t("h4",{attrs:{id:"_2-단기-스케줄러-short-term-scheduler-cpu-scheduler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-단기-스케줄러-short-term-scheduler-cpu-scheduler"}},[_._v("#")]),_._v(" 2. 단기 스케줄러 (Short-term scheduler / CPU scheduler)")]),_._v(" "),t("ul",[t("li",[_._v("CPU 와 메모리 사이의 스케줄링")]),_._v(" "),t("li",[_._v("Ready Queue 에 존재하는 프로세스 중 running 프로세스를 결정한다.")]),_._v(" "),t("li",[_._v("프로세스에 CPU 를 할당")])]),_._v(" "),t("h4",{attrs:{id:"_3-중기-스케줄러-medium-term-scheduler-swapper"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-중기-스케줄러-medium-term-scheduler-swapper"}},[_._v("#")]),_._v(" 3. 중기 스케줄러 (Medium-term scheduler / Swapper)")]),_._v(" "),t("ul",[t("li",[_._v("여유 공간 마련을 위해 프로세스 통째로 메모리에서 디스크로 내보낸다.(swapping)")]),_._v(" "),t("li",[_._v("메모리에 너무 많은 프로그램이 동시에 올라가는 것을 조절함")]),_._v(" "),t("li",[_._v("프로세스의 상태: ready -> suspended(stopped)")])]),_._v(" "),t("h2",{attrs:{id:"멀티-프로세싱-멀티-프로그래밍-멀티-태스킹"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#멀티-프로세싱-멀티-프로그래밍-멀티-태스킹"}},[_._v("#")]),_._v(" 멀티 프로세싱, 멀티 프로그래밍, 멀티 태스킹")]),_._v(" "),t("h3",{attrs:{id:"멀티-프로세싱-멀티-코어-시스템"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#멀티-프로세싱-멀티-코어-시스템"}},[_._v("#")]),_._v(" 멀티 프로세싱 (멀티 코어 시스템)")]),_._v(" "),t("p",[_._v("하나 이상의 "),t("strong",[_._v("프로세서")]),_._v("가 서로 협력하여 일을 처리\n-> 멀티 프로세서가 "),t("strong",[_._v("협력")]),_._v("하여 일 처리")]),_._v(" "),t("h3",{attrs:{id:"멀티-프로그래밍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#멀티-프로그래밍"}},[_._v("#")]),_._v(" 멀티 프로그래밍")]),_._v(" "),t("h3",{attrs:{id:"멀티-태스킹"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#멀티-태스킹"}},[_._v("#")]),_._v(" 멀티 태스킹")]),_._v(" "),t("h2",{attrs:{id:"reference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[_._v("#")]),_._v(" Reference")]),_._v(" "),t("ul",[t("li",[_._v("https://github.com/JaeYeopHan/Interview_Question_for_Beginner/tree/master/OS")]),_._v(" "),t("li",[_._v("https://bowbowbow.tistory.com/16")]),_._v(" "),t("li",[_._v("https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4")]),_._v(" "),t("li",[_._v("DKU 최종무 교수님 운영체제 강의")])])])}),[],!1,null,null,null);v.default=e.exports}}]);